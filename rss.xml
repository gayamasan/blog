<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Gatsby Starter Blog RSS Feed]]></title><description><![CDATA[Gatsby Starter Blog RSS Feed]]></description><link>http://github.com/dylang/node-rss</link><generator>GatsbyJS</generator><lastBuildDate>Tue, 21 Mar 2023 08:13:28 GMT</lastBuildDate><item><title><![CDATA[Scala言語のOption型の本質と使い方]]></title><description><![CDATA[Option 型のポイント Option 型の本質 プログラミング中に Option 型に遭遇した場合、次の 2 つの解釈ができます。1 つ目は、ある値が存在するかどうかを表現したものです。これは単純に、値が存在する場合は Some となり、値が存在しない場合は None…]]></description><link>null/Scala言語のOption型の本質と使い方/</link><guid isPermaLink="false">null/Scala言語のOption型の本質と使い方/</guid><pubDate>Mon, 20 Mar 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Option 型のポイント&lt;/h2&gt;
&lt;h3&gt;Option 型の本質&lt;/h3&gt;
&lt;p&gt;プログラミング中に Option 型に遭遇した場合、次の 2 つの解釈ができます。1 つ目は、ある値が存在するかどうかを表現したものです。これは単純に、値が存在する場合は Some となり、値が存在しない場合は None となります。2 つ目は、例外ハンドリング結果を表現したものです。正常に実行できた場合は Some となり、プログラムの実行中に意図した例外が発生した場合には None となります。&lt;/p&gt;
&lt;p&gt;Option 型を抽象化した概念の 1 つに、エフェクトを閉じ込めることができるエフェクトフルコンテキストがあります。エフェクトとは、例外などの副作用で関数の純粋性を欠く要素のことです。エフェクトフルコンテキストを導入することで、関数を純粋なものにすることが可能になります。ここで、例外は純粋性を損なうエフェクトであり、Option 型はそれを吸収する役割を担っています。つまり、Option 型の本質は、例外というエフェクトを吸収し純粋関数を作成するための手段であることです。&lt;/p&gt;
&lt;h3&gt;単一の Option 型の値に対して処理をしたいとき&lt;/h3&gt;
&lt;p&gt;初心者がやりがちなのは、Option 型の値を取り出そうとすることですが、これは誤った発想です。代わりに、Option 型の値を変換する発想が必要です。Option 型の値を変換するには、map コンビネーターを使用することで実現できます。また、他にも Option 型から値を取り出さずに処理を行うコンビネーターが提供されていますので、こちらを使用することをおすすめします。ただし最終的にはどこかのタイミングで Option 型から値を取り出す必要がありますが、可能な限りそのタイミングは遅らせるべきです。&lt;/p&gt;
&lt;h3&gt;複数の Option 型の値に対して処理をしたいとき&lt;/h3&gt;
&lt;p&gt;初心者が陥りやすいのは、2 つの Option 型に対して処理をした結果、戻りの型が &lt;code class=&quot;language-text&quot;&gt;Option[Option[T]]&lt;/code&gt; のようにネストしてしまうことです。しかし、このネストしたものが表現するパターンは、以下のとおりです。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;外側の Option&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;内側の Option&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;実質的に値があるかどうか&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Some&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Some&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;ある（Some）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Some&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;None&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;ない（None）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;None&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;ない（None）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;None&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;ない（None）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;また、Option 型には別の解釈方法もあり、最大要素数が 1 のコレクションとして捉えることができます。この場合、&lt;code class=&quot;language-text&quot;&gt;Option[Option[T]]&lt;/code&gt;の全体の要素数は以下のとおりです。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;外側の要素数&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;内側の要素数&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;全体の要素数&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1（Some）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0（None）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;0&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0（None）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;0&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0（None）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;つまり、実質的には Some か None の 2 通りしかありませんので、&lt;code class=&quot;language-text&quot;&gt;Option[Option[T]]&lt;/code&gt; を &lt;code class=&quot;language-text&quot;&gt;Option[T]&lt;/code&gt; と平坦化することが望ましいです。この平坦化を実現するには、flatMap コンビネーターを使用することで簡単に実現できます。&lt;/p&gt;
&lt;p&gt;実務的には、まずは map コンビネーターを使って処理をしてみて、戻り値が &lt;code class=&quot;language-text&quot;&gt;Option[Option[T]]&lt;/code&gt; のようになってしまった場合は、外側の map を flatMap に変更することで解決できます。&lt;/p&gt;
&lt;p&gt;このように &lt;code class=&quot;language-text&quot;&gt;Option[Option[T]]&lt;/code&gt; を &lt;code class=&quot;language-text&quot;&gt;Option[T]&lt;/code&gt; に変換できる性質を含めた抽象化された概念をモナドと呼びます。つまり、flatMap とはモナドという概念を表していることになります。&lt;/p&gt;
&lt;h3&gt;for 式と flatMap の関係&lt;/h3&gt;
&lt;p&gt;初心者が誤解しやすいのは、Scala の for 式をループ処理の指定だと勘違いしていることです。しかし、Scala の for 式においてはその発想をまず捨ててください。for 式の本質は flatMap の書き換えであり、ループ処理ではありません。flatMap の階層が深くなってきた場合には、for 式に書き換えることをおすすめします。&lt;/p&gt;
&lt;p&gt;以下に Option 型に対して for 式を適用した具体例を示します。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; iOpt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Some&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; jOpt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Some&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; kOpt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Some&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// flatMapで平坦化&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  iOpt flatMap &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt;
    jOpt flatMap &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; j &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt;
      kOpt map &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; k &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; sum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; k
        sum
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// for式で平坦化&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  i &lt;span class=&quot;token keyword&quot;&gt;&amp;lt;-&lt;/span&gt; iOpt &lt;span class=&quot;token comment&quot;&gt;// #flatMap&lt;/span&gt;
  j &lt;span class=&quot;token keyword&quot;&gt;&amp;lt;-&lt;/span&gt; jOpt &lt;span class=&quot;token comment&quot;&gt;// #flatMap&lt;/span&gt;
  k &lt;span class=&quot;token keyword&quot;&gt;&amp;lt;-&lt;/span&gt; kOpt &lt;span class=&quot;token comment&quot;&gt;// #map&lt;/span&gt;
  sum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; k
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  sum
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// flatMapで平坦化した a と for式で平坦化した b は全く同じ&lt;/span&gt;
println&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Some(6)&lt;/span&gt;
println&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Some(6)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Option 型に対してパターンマッチングを使うべきか&lt;/h3&gt;
&lt;p&gt;原則として、Option 型に対してパターンマッチングを使用するべきではありませんが、柔軟な条件分岐が要求される場合は例外となります。Option 型には様々なコンビネータが用意されており、計算結果の合成が容易で、チェーン操作により直感的な実装が可能であり、可読性が向上します。一方で、簡単なシチュエーションでパターンマッチングを使用すると、冗長なコードになり可読性が低下することがあります。&lt;/p&gt;
&lt;p&gt;以下は、典型的な悪いコード例です。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; opt&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Option&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Some&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

opt &lt;span class=&quot;token keyword&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; Some&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt; Some&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; None &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt; None
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;関数シグネチャとして Option 型を使うべきか&lt;/h3&gt;
&lt;p&gt;関数シグネチャに Option 型は存在しない方が望ましいです。つまり、関数への入力値は必ず存在し、関数から返す値も必ず存在することが望ましいということです。ただし、実際にはプログラミングにおいて、一度でも Option 型に関わった場合、Option 型が付きまとうことがあります。そのため、関数の出力に Option 型が存在するのは一般的で、これは意図した例外が発生する可能性があることを示唆しています。一方、関数の入力に Option 型が存在する場合は、設計が適切でない可能性が高いです。&lt;/p&gt;
&lt;h2&gt;おわりに&lt;/h2&gt;
&lt;p&gt;本記事では、Option 型について説明しましたが、抽象化された概念は他の型（Future 型など）にも適用できるため、これらの型の役割や取り扱い方法を理解するためにも重要です。&lt;/p&gt;</content:encoded></item></channel></rss>