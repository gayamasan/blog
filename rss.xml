<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Gatsby Starter Blog RSS Feed]]></title><description><![CDATA[Gatsby Starter Blog RSS Feed]]></description><link>https://gayamasan.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Mon, 17 Apr 2023 05:08:03 GMT</lastBuildDate><item><title><![CDATA[Scalaで実現するAOP：遅延評価を使った横断的関心事の分離]]></title><description><![CDATA[AOP（Aspect-Oriented Programming） AOP（Aspect-Oriented Programming）とは、横断的関心事（cross-cutting concerns…]]></description><link>https://gayamasan.github.io/scala-aop-solutions/</link><guid isPermaLink="false">https://gayamasan.github.io/scala-aop-solutions/</guid><pubDate>Fri, 14 Apr 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;AOP（Aspect-Oriented Programming）&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;AOP（Aspect-Oriented Programming）とは、横断的関心事（cross-cutting concerns）をコードから分離し、コードの再利用性や可読性、保守性を向上させるプログラミングパラダイムの一つです。
横断的関心事とは、複数のモジュールやクラスにまたがる機能や処理のことで、例えばログ出力、認証、トランザクション管理などがあります。&lt;sup id=&quot;fnref-1&quot;&gt;&lt;a href=&quot;#fn-1&quot; class=&quot;footnote-ref&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;簡単に言うと、以下のような例において、println(&quot;before&quot;) と println(&quot;after&quot;)を分離することです。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; run&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  println&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;before&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// do something&lt;/span&gt;
  println&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;after&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;遅延評価を使って AOP を実現する&lt;/h2&gt;
&lt;p&gt;Scala で遅延評価をする方法は &lt;code class=&quot;language-text&quot;&gt;lazy&lt;/code&gt; を使う方法と名前渡しパラメータ&lt;sup id=&quot;fnref-2&quot;&gt;&lt;a href=&quot;#fn-2&quot; class=&quot;footnote-ref&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;を使う方法がありますが、ここでは後者を使います。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//（例）&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; withLogging&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;T&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt; T&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; T &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  println&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;before&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; f
  println&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;after&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  result
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; run&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; withLogging &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// do something&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この例では、ログ出力の横断的関心事が &lt;code class=&quot;language-text&quot;&gt;withLogging&lt;/code&gt; に分離されました。これにより、ビジネスロジックと横断的関心事が分離され、コードの可読性と保守性が向上します。&lt;/p&gt;
&lt;h2&gt;脚注&lt;/h2&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&quot;fn-1&quot;&gt;ChatGPT より&lt;a href=&quot;#fnref-1&quot; class=&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li id=&quot;fn-2&quot;&gt;&lt;a href=&quot;https://docs.scala-lang.org/tour/by-name-parameters.html&quot;&gt;https://docs.scala-lang.org/tour/by-name-parameters.html&lt;/a&gt;&lt;a href=&quot;#fnref-2&quot; class=&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Scala開発者のための性能チューニングテクニック]]></title><description><![CDATA[…]]></description><link>https://gayamasan.github.io/scala-tuning/</link><guid isPermaLink="false">https://gayamasan.github.io/scala-tuning/</guid><pubDate>Thu, 13 Apr 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;性能問題が起きるのは、アプリケーション全体の一部分に限られることが多く、開発時に常に性能特化した実装に注力する必要はありません。むしろ、可読性を重視した実装に取り組むべきです。
性能改善は、問題が発生した場合に適切に対処すれば十分で、性能が悪化する実装を避けることが重要です。
往々にして、性能問題はデータベースに起因することが多いですが、アプリケーション自体に問題がある場合もあります。このような場合には、適切な対策を講じることで性能を向上させることが可能です。
総じて、開発時には可読性を重視し、性能問題が発生した際に効果的な対策を行うことが、アプリケーション開発において望ましいアプローチとなります。
処理性能に大きな影響を与える問題がある部分を特定し、その原因を調査して解決する方法が一般的です。しかし、ここでは詳細を省略し、代表的な汎用性のあるテクニックのみを記載します。
ここに記載した対応だけでは、処理性能の改善が達成できない可能性も十分に考えられます。&lt;/p&gt;
&lt;h2&gt;汎用性のある性能改善テクニック&lt;/h2&gt;
&lt;h3&gt;コレクションの最適化&lt;/h3&gt;
&lt;h4&gt;使用するコレクションの選定&lt;sup id=&quot;fnref-1&quot;&gt;&lt;a href=&quot;#fn-1&quot; class=&quot;footnote-ref&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h4&gt;
&lt;p&gt;Scala には、主に 3 つのコレクションがあります。それらは、Seq、Set、Map です。
一般的には、Seq が最も使われるコレクションですが、特定の状況下では、Set や Map を利用することで処理性能が大幅に向上し、論理的な整合性をより適切に表現することができます。
Set や Map は、デフォルトで HashSet と HashMap が実装されています。これらの主な特性として、要素の順番が保証されないものの、高速な検索が可能であり、コレクションの要素数に関わらず平均的に O(1)の定数時間で検索ができます。&lt;/p&gt;
&lt;p&gt;例えば、大量の要素を持つコレクション Seq に対して繰り返し find 等の処理を行う場合、Map に切り替えることで大幅な性能向上が見込めます。&lt;/p&gt;
&lt;p&gt;特に、組み合わせ・集合を取り扱う際には、可読性と処理性能の観点から、Set を使用することが推奨されます。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Seqは並び順を考慮しないと等価と判定されない。&lt;/span&gt;
Seq&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; Seq&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Setは並び順を考慮しなくても等価と判定される。さらに処理性能が向上する。&lt;/span&gt;
Set&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; Set&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このように、Scala の各コレクションは、状況に応じて適切に利用することで、効率的なプログラムを実現することができます。&lt;/p&gt;
&lt;h4&gt;並列コレクションの使用&lt;sup id=&quot;fnref-2&quot;&gt;&lt;a href=&quot;#fn-2&quot; class=&quot;footnote-ref&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/h4&gt;
&lt;p&gt;標準ライブラリには、並列コレクションが含まれており、これを使用することでコレクション内の要素を並列に処理することができます。これは、コレクションの各要素を同時に処理する場合に非常に有効です。&lt;/p&gt;
&lt;p&gt;また、パフォーマンスをさらに向上させるために、並列コレクションの並列度を調整することができます。ただし、単純に並列度を上げるだけでは、必ずしも最適なパフォーマンスが得られるわけではありません。&lt;/p&gt;
&lt;p&gt;並列度の調整は以下のような方法で行うことができます。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; parseq&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ParSeq&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;_&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;
parseq&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tasksupport &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; ForkJoinTaskSupport&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; ForkJoinPool&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// ParSeq の並列度を 4 にする&lt;/span&gt;
parseq&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;foreach&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_ &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt; task&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上記のコードでは、ParSeq の並列度を 4 に設定しています。これにより、タスクが 4 つの並行処理に分割され、処理が高速化されることが期待できます。
ただし、並列度の最適な値はアプリケーションや状況によって異なるため、適切な値を見つけるためには実験が必要です。&lt;/p&gt;
&lt;h2&gt;脚注&lt;/h2&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&quot;fn-1&quot;&gt;&lt;a href=&quot;https://docs.scala-lang.org/overviews/collections/overview.html&quot;&gt;https://docs.scala-lang.org/overviews/collections/overview.html&lt;/a&gt;&lt;a href=&quot;#fnref-1&quot; class=&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li id=&quot;fn-2&quot;&gt;&lt;a href=&quot;https://docs.scala-lang.org/overviews/parallel-collections/overview.html&quot;&gt;https://docs.scala-lang.org/overviews/parallel-collections/overview.html&lt;/a&gt;&lt;a href=&quot;#fnref-2&quot; class=&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Scalaプロジェクトのコンパイル時間を短縮するヒント]]></title><description><![CDATA[はじめに まずは、前提として理解しておくべき事項を説明します。 ライブラリ依存関係の解決 sbt…]]></description><link>https://gayamasan.github.io/scala-compile-tuning/</link><guid isPermaLink="false">https://gayamasan.github.io/scala-compile-tuning/</guid><pubDate>Mon, 10 Apr 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;まずは、前提として理解しておくべき事項を説明します。&lt;/p&gt;
&lt;h3&gt;ライブラリ依存関係の解決&lt;/h3&gt;
&lt;p&gt;sbt を用いて &lt;code class=&quot;language-text&quot;&gt;compile&lt;/code&gt; を実行すると、必要に応じてライブラリの依存関係解決（&lt;code class=&quot;language-text&quot;&gt;update&lt;/code&gt;）が行われます。
依存関係解決が完了した後、ソースコードのコンパイルが開始されます。
そのため、&lt;code class=&quot;language-text&quot;&gt;compile&lt;/code&gt;が遅い場合は、依存関係解決が遅いのか、ソースコードのコンパイルが遅いのかを判断する必要があります。&lt;/p&gt;
&lt;p&gt;ここで、ライブラリの依存関係解決とは、プロジェクトが必要とする外部ライブラリをダウンロードし、プロジェクト内で利用可能にすることを意味します。
ただし、ライブラリの依存関係が解決済みの場合は、キャッシュされた結果が使用されます。
ライブラリの依存関係のキャッシュは、デフォルトでユーザーのホームディレクトリ内の&lt;code class=&quot;language-text&quot;&gt;.ivy2&lt;/code&gt;ディレクトリに保存されます。&lt;/p&gt;
&lt;h3&gt;増分コンパイル&lt;/h3&gt;
&lt;p&gt;sbt では増分コンパイルが採用されています。増分コンパイルとは、変更されたソースコードのみをコンパイルし、変更されていないコードは前回のコンパイル結果を再利用する方法です。
これにより、コンパイル時間が短縮されます。一方、前回のコンパイル結果を再利用せずフルコンパイルを行う場合は、&lt;code class=&quot;language-text&quot;&gt;clean&lt;/code&gt;を実行して前回のコンパイル結果を削除することで実現できます。
コンパイル時間を計測する際は、フルコンパイルの時間を測定する必要があります。&lt;/p&gt;
&lt;h3&gt;コンパイル時間の計測方法&lt;/h3&gt;
&lt;p&gt;sbt のオプション &lt;code class=&quot;language-text&quot;&gt;-Dsbt.task.timings=true&lt;/code&gt; を使用して、簡易的な所要時間の計測が可能です。&lt;/p&gt;
&lt;h2&gt;コンパイルが遅くなる代表的な要因と改善案&lt;/h2&gt;
&lt;p&gt;コンパイルが遅くなる代表的な要因と改善案は以下のとおりです。&lt;/p&gt;
&lt;h3&gt;CPU の性能を向上させる&lt;/h3&gt;
&lt;p&gt;まず、コンパイル環境の問題ですが、マシンのスペックが低いとコンパイル時間が長くなります。
経験上、高速化のカギを握るのは CPU の性能です。
適切なメモリ割り当て量があれば、メモリの増減は大きな影響を与えません。
従って、予算に余裕がある場合は、CPU の性能を向上させることが効果的です。&lt;/p&gt;
&lt;h3&gt;ファイルシステムのパフォーマンスを向上させる&lt;/h3&gt;
&lt;p&gt;コンパイル中には多くのファイルが読み書きされます。ファイルシステムのパフォーマンスが低いと、コンパイル時間が長くなります。
例えば、Windows マシンの WSL2 で Docker を使う場合、Windows ファイルシステムにファイルを配置し、それをバインドマウントしてファイルアクセスを行うと、パフォーマンスが大幅に低下します&lt;sup id=&quot;fnref-1&quot;&gt;&lt;a href=&quot;#fn-1&quot; class=&quot;footnote-ref&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;h3&gt;ソースコードを減らす&lt;/h3&gt;
&lt;p&gt;単純に言えば、ソースコードが多ければ多いほどコンパイル作業が増えます。
長期間運用されているプロジェクトはデッドコードが多い傾向があります。これを徹底的に削除することで、コンパイルを高速化できる可能性があります。&lt;/p&gt;
&lt;h3&gt;マクロの使用を減らす&lt;/h3&gt;
&lt;p&gt;マクロはコンパイル時に実行されるタスクです。マクロが多いほどコンパイル時のタスクが増えるため、コンパイル時間が長くなります。
例えば、マクロはボイラープレートコードの実装を回避するための有用なツールですが、マクロを多用している場合は別の方法に置き換えることで、コンパイル時間の短縮ができる可能性があります。&lt;/p&gt;
&lt;h3&gt;implicit の使用を減らす&lt;/h3&gt;
&lt;p&gt;implicit が多用されると、Scala コンパイラは暗黙の引数や変換を解決するために多くの探索を行う必要があり、コンパイル時間が長くなる可能性があります。implicit は有用な機能ですが、適切な使用法を選択することが重要です。&lt;/p&gt;
&lt;h3&gt;サブプロジェクト間の依存関係を最適化する&lt;/h3&gt;
&lt;p&gt;sbt はデフォルトで並列実行されますが、サブプロジェクト間に依存関係がある場合、依存先がコンパイル完了するまで依存元のコンパイルは開始されません。
依存関係の設定を最適化することで、プロジェクト全体のコンパイル時間を短縮できる可能性があります。&lt;/p&gt;
&lt;h3&gt;インターフェースと実装を分ける&lt;/h3&gt;
&lt;p&gt;インターフェースと実装を分離することで、依存関係が単純化され、コンパイルが高速化される可能性があります。また、再コンパイルの範囲を限定的にすることもできます。&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;コンパイルの遅さを改善するためには、いくつかの要因を検討する必要があります。
具体的には、環境やハードウェアの最適化、ソースコードの整理、マクロや implicit の適切な使用、依存関係の最適化、およびインターフェースと実装の分離が挙げられます。
これらの要因を検討し、適切な改善策を適用することで、プロジェクトのコンパイル時間を短縮できるでしょう。&lt;/p&gt;
&lt;h2&gt;脚注&lt;/h2&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&quot;fn-1&quot;&gt;&lt;a href=&quot;https://learn.microsoft.com/ja-jp/windows/wsl/tutorials/wsl-containers&quot;&gt;参考資料&lt;/a&gt;&lt;a href=&quot;#fnref-1&quot; class=&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Scala上級者向けのマクロ入門]]></title><description><![CDATA[はじめに Scala のマクロは、通常の開発においてはあまり使用されることがないため、Scala 初心者が学習する必要はありません。しかし、独自の仕組みやツールを作成する際には、マクロは非常に強力な武器となります。本記事は Scala…]]></description><link>https://gayamasan.github.io/scala-macro/</link><guid isPermaLink="false">https://gayamasan.github.io/scala-macro/</guid><pubDate>Thu, 30 Mar 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;Scala のマクロは、通常の開発においてはあまり使用されることがないため、Scala 初心者が学習する必要はありません。しかし、独自の仕組みやツールを作成する際には、マクロは非常に強力な武器となります。本記事は Scala 2 系を前提として説明しています。&lt;/p&gt;
&lt;h2&gt;マクロを実装するまでの道&lt;/h2&gt;
&lt;h3&gt;Scala で提供されているリフレクションについて&lt;/h3&gt;
&lt;p&gt;マクロを理解するためには、まずリフレクションについて触れる必要があります。&lt;/p&gt;
&lt;p&gt;Scala では、リフレクションにはランタイムリフレクションとコンパイルタイムリフレクションの 2 つがあります。&lt;sup id=&quot;fnref-1&quot;&gt;&lt;a href=&quot;#fn-1&quot; class=&quot;footnote-ref&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;
コンパイルタイムリフレクションを利用することで、抽象構文木（AST: Abstract Syntax Tree）を変更したり作成したりすることができます。&lt;sup id=&quot;fnref-2&quot;&gt;&lt;a href=&quot;#fn-2&quot; class=&quot;footnote-ref&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;
これにより、抽象構文木を操作できることから、メタプログラミングが可能になります。そして、マクロはコンパイルタイムリフレクションを利用して実現される機能です。&lt;/p&gt;
&lt;p&gt;マクロを使うことで、例えばボイラープレートコードの排除ができます。一方、マクロを多用すると、コンパイルが遅くなる要因になることがあるため、注意が必要です。
また、マクロに詳しい人はそれほど多くないため、詳しい人がいなくなった場合には、調査や改修の難易度が上がることがあります。&lt;/p&gt;
&lt;h3&gt;抽象構文木とその操作方法&lt;/h3&gt;
&lt;p&gt;抽象構文木とは、プログラムの構文をツリー状に表現したものです。簡単に言うと、ソースコードを解析して得られるデータ構造です。&lt;/p&gt;
&lt;p&gt;以下に例を示します。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; plus&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; y&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この関数の、&lt;code class=&quot;language-text&quot;&gt;x + y&lt;/code&gt; の部分の抽象構文木を確認してみます。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;scala&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;reflect&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;runtime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;universe&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;_
showRaw&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token id function&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;x + y&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

res1&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Apply&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Select&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Ident&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;TermName&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; TermName&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;$plus&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; List&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Ident&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;TermName&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;y&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;またメソッド全体の抽象構文木は次のようになります。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;scala&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;reflect&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;runtime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;universe&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;_
showRaw&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token id function&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;def plus(x: Int, y: Int): Int = x + y&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

res2&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; DefDef&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Modifiers&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; TermName&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;plus&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; List&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; List&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;List&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ValDef&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Modifiers&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;PARAM&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; TermName&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Ident&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;TypeName&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Int&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; EmptyTree&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ValDef&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Modifiers&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;PARAM&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; TermName&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;y&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Ident&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;TypeName&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Int&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; EmptyTree&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Ident&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;TypeName&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Int&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Apply&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Select&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Ident&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;TermName&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; TermName&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;$plus&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; List&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Ident&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;TermName&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;y&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;メタプログラミングを行う場合、これらのような、抽象構文木を作成したり、変更したりすることで実現します。ここで、より簡単に AST を操作する方法があります。
それが &lt;strong&gt;&lt;em&gt;準クォート（Quasiquotes）&lt;/em&gt;&lt;/strong&gt; と呼ばれる表記法です。例えば、前述の例の &lt;code class=&quot;language-text&quot;&gt;q&quot;...&quot;&lt;/code&gt; がその表記法です。詳細な使い方は公式ドキュメントを参照してください。&lt;sup id=&quot;fnref-3&quot;&gt;&lt;a href=&quot;#fn-3&quot; class=&quot;footnote-ref&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h3&gt;マクロの実装&lt;/h3&gt;
&lt;p&gt;例として、実践では使うことはないようなマクロではありますが、ここでは足し算をするマクロを実装してみます。&lt;/p&gt;
&lt;p&gt;まず公式ドキュメントに倣って書くと次のようになります。&lt;sup id=&quot;fnref-4&quot;&gt;&lt;a href=&quot;#fn-4&quot; class=&quot;footnote-ref&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;scala&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;language&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;experimental&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;macros&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;scala&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;reflect&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;macros&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;Context

&lt;span class=&quot;token keyword&quot;&gt;object&lt;/span&gt; PlusMacros &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; plus&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; macro plusImpl

  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; plusImpl&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Context&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Expr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Expr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Expr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;c&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;universe&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;_
    reify&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;splice &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;splice&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;準クォートを使った表記法に書き換えると次のようになります。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;object&lt;/span&gt; PlusMacros &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; plus&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; macro plusImpl

  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; plusImpl&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Context&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Expr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Expr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Expr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;c&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;universe&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;_
    c&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Expr&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token id function&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token expression&quot;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; + &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token expression&quot;&gt;y&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さらに、scala 2.11 以降では &lt;code class=&quot;language-text&quot;&gt;c.Expr[Int]&lt;/code&gt; を &lt;code class=&quot;language-text&quot;&gt;c.Tree&lt;/code&gt; として次のように書くこともできます。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;object&lt;/span&gt; PlusMacros &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; plus&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; macro plusImpl

  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; plusImpl&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Context&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Tree&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Tree&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Tree &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;c&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;universe&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;_
    &lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token id function&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token expression&quot;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; + &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token expression&quot;&gt;y&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これに加えてマクロバンドルを使うと次のようになります。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;object&lt;/span&gt; PlusMacros &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; plus&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; macro PlusMacrosImpl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;plusImpl

&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; PlusMacrosImpl&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; c&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Context&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;c&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;universe&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;_

  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; plusImpl&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Tree&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Tree&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Tree &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token id function&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token expression&quot;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; + &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token expression&quot;&gt;y&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このときマクロを使用する側では次のようになります。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ソースコードの段階&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; sum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; PlusMacros&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;plus&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// コンパイルをした段階&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; sum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;注意点として、マクロは一番最初にコンパイルする必要があります。&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;マクロアノテーション&lt;/h3&gt;
&lt;p&gt;マクロアノテーションとは、自作のアノテーションを付与するだけでマクロを展開できる仕組みです。
例として、アノテーションを付けたメソッドに対して事前処理を割り込ませる仕組みを実装してみます。
全体の流れとしては、共通処理を用意しておき、それをマクロを使って割り込ませる方式をとります。ここでは、事前処理はログ出力をするものとします。&lt;/p&gt;
&lt;p&gt;まず、次のようなログ出力を割り込ませるための共通処理を関数として用意しておきます。具体的な実装は省略します。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;object&lt;/span&gt; Logging &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; before&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;T&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt; T&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; T &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;つぎに、マクロアノテーションの作成です。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; BeforeLogging &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; StaticAnnotation &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; macroTransform&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;annottees&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Any&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; macro BeforeLoggingMacroImpl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;impl
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;続いて、マクロの実装です。ただし見通しを良くするため作り込んではいません。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; BeforeLoggingMacroImpl&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; c&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Context&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;c&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;universe&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;_

  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; impl&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;annottees&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Tree&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Tree &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// マクロアノテーションを付与したメソッドの抽象構文木を取得します&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; method &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; annottees&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;head

    &lt;span class=&quot;token comment&quot;&gt;// パターンマッチで各パーツを抽出します。&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token id function&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token expression&quot;&gt;mods&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; def &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token expression&quot;&gt;name&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;[..&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token expression&quot;&gt;tparams&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;](...&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token expression&quot;&gt;paramss&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;): &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token expression&quot;&gt;tpt&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; = &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token expression&quot;&gt;body&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; method

    &lt;span class=&quot;token comment&quot;&gt;// 共通処理を元の本体に埋め込みます&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; newBody &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token id function&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Logging.before { &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token expression&quot;&gt;body&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; }&quot;&lt;/span&gt;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// 共通処理を埋め込んだ本体を含めた新しい抽象構文木を返します&lt;/span&gt;
    &lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token id function&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token expression&quot;&gt;mods&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; def &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token expression&quot;&gt;name&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;[..&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token expression&quot;&gt;tparams&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;](...&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token expression&quot;&gt;paramss&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;): &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token expression&quot;&gt;tpt&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; = &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token expression&quot;&gt;newBody&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後に、マクロアノテーションの利用側の実装です。次のようにアノテーションを付与するだけで、事前に準備した処理を割り込ませることができます。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; main&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;args&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; doSomething&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token annotation punctuation&quot;&gt;@BeforeLogging&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; doSomething&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; println&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Do something.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;おわりに&lt;/h2&gt;
&lt;p&gt;本記事ではベストプラクティスとはいえないものを含んでいる可能性がありますのでご了承ください。&lt;/p&gt;
&lt;h2&gt;脚注&lt;/h2&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&quot;fn-1&quot;&gt;&lt;a href=&quot;https://docs.scala-lang.org/overviews/reflection/overview.html&quot;&gt;公式ドキュメント&lt;/a&gt;より&lt;a href=&quot;#fnref-1&quot; class=&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li id=&quot;fn-2&quot;&gt;&lt;a href=&quot;https://docs.scala-lang.org/overviews/reflection/symbols-trees-types.html#trees&quot;&gt;公式ドキュメント&lt;/a&gt;より&lt;a href=&quot;#fnref-2&quot; class=&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li id=&quot;fn-3&quot;&gt;&lt;a href=&quot;https://docs.scala-lang.org/overviews/quasiquotes/intro.html&quot;&gt;公式ドキュメント&lt;/a&gt;より&lt;a href=&quot;#fnref-3&quot; class=&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li id=&quot;fn-4&quot;&gt;&lt;a href=&quot;https://docs.scala-lang.org/overviews/macros/overview.html&quot;&gt;公式ドキュメント&lt;/a&gt;より&lt;a href=&quot;#fnref-4&quot; class=&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[雑兵と精鋭の分水嶺！関数のつくりかた]]></title><description><![CDATA[…]]></description><link>https://gayamasan.github.io/function-design/</link><guid isPermaLink="false">https://gayamasan.github.io/function-design/</guid><pubDate>Mon, 27 Mar 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;関数を単に実装することは誰でもできることですが、関数を高品質に設計するにはそれなりのスキルが必要です。関数の品質が悪いと、それを利用する側のコード品質も低下し、結果的にコード全体の品質が悪くなります。したがって、たかが関数と思われがちですが、実際には関数が非常に重要な役割を果たしていることを理解し、適切なスキルを身につけることが重要です。&lt;/p&gt;
&lt;h2&gt;分けるは分かる&lt;/h2&gt;
&lt;p&gt;プログラムのコードに限らず、あらゆるものにおいて「分けることは理解することにつながる」といえます。そこで、プログラムの関数を作成またはリファクタリングする際に効果的な 4 つの「分ける」を紹介します。&lt;/p&gt;
&lt;h3&gt;フェーズを分ける&lt;/h3&gt;
&lt;p&gt;典型的な例として、バックエンドが提供する API として、クライアントサイドでフォーム画面に入力された情報を HTTP リクエストで受け取り、それをデータベースに登録するという処理を想定します。この種の処理では、一般的なパターンが決まっており、認可処理、フォームのバリデーションチェック、ビジネスロジックチェック、入力フォームの内容を内部モデルに変換すること、そしてデータベースへの登録が含まれます。&lt;/p&gt;
&lt;p&gt;しかし、データベースへの登録直前に認可処理を行ったり、フォームのバリデーションチェックが完了していないのにビジネスロジックチェックを行ったりすると、混乱が生じることがあります。フェーズ分けがされていない場合、開発者は一連の処理全体を同時に考慮し続ける必要があります。これによって、思考の負担が大きくなることがあります。その結果、バグを作り込む根本原因ともなることがあるのです。&lt;/p&gt;
&lt;p&gt;そのため、まずはフェーズを分け、各フェーズで関心事に集中できるようにすることが重要です。これにより、処理の流れが明確になり、効率的な開発やメンテナンスが実現できます。&lt;/p&gt;
&lt;h3&gt;副作用（エフェクト）を分ける&lt;/h3&gt;
&lt;p&gt;まず、誤解がないように申し上げますが、一連の処理から副作用を完全に無くすことは不可能です。あくまで分離が目的です。副作用を分離する目的は、その関数をエフェクトレスな関数にするためです。エフェクトレスな関数であることは純粋関数であることの必要条件です。ここで分離すべき副作用の例としては、データベースへの登録処理やメール送信処理などが挙げられます。&lt;/p&gt;
&lt;p&gt;関数シグネチャの設計におけるポイントは、関数が何らかの値を返す場合、すなわち主作用がある場合は副作用を持たせないことが望ましいです。逆に、副作用を実行することが目的の関数では、主作用が存在しないこと、すなわち関数の戻り値がないことを関数シグネチャを通じて示唆することが重要です。&lt;/p&gt;
&lt;h3&gt;状態依存（ステート）を分ける&lt;/h3&gt;
&lt;p&gt;関数から状態を分離する目的は、その関数をステートレスな関数にするためです。ステートレスな関数であることは、純粋関数であることの必要条件です。ステートレスな関数とは、出力が入力にのみ依存するもので、同じ入力パラメータを渡すと毎回同じ出力が返されるものです。&lt;/p&gt;
&lt;p&gt;例えば、関数内でシステム日時という OS の状態を参照し、それを基に出力が決定される場合、それはステートレスな関数とは言えません。このような場合は、システム日時を入力パラメータとして受け取ることで、状態を分離することができます。&lt;/p&gt;
&lt;h3&gt;インターフェースと実装を分ける&lt;/h3&gt;
&lt;p&gt;同じ処理を繰り返し行う場合や、複数箇所で同じ処理を実行する際、関数を作成することがよく行われます。ただし、このような状況では、実装に重点を置いたボトムアップな関数が作成されがちです。結果として、関数利用者が実装を調べなければ使えない関数が作られることがあります。&lt;/p&gt;
&lt;p&gt;良い関数設計では、関数シグネチャからその目的を推測できることが大切です。利用者は「どのように実行されるか」よりも「何をするか」に関心があります。これがカプセル化の重要性です。&lt;/p&gt;
&lt;p&gt;「何をするか」はインターフェースが担当し、「どのように実行するか」は実装が担当します。そのため、まずインターフェースを設計し、トップダウンな考え方で関数設計を行うことで、品質を向上させることができます。実装が隠蔽され、利用者が確認できない場合、関数の目的を判断する方法は関数シグネチャとコメントだけです。だからこそ、関数名が重要です。適切な関数名が付けられない場合、前述の 3 つの要素がうまく分離されていない可能性があります。&lt;/p&gt;
&lt;h2&gt;純粋関数への昇華&lt;/h2&gt;
&lt;p&gt;純粋関数を説明する際に、「参照透過性」と「副作用」という用語が登場し、説明が難解になると思われるため、ここでわかりやすく説明します。&lt;/p&gt;
&lt;p&gt;まず鍵となる用語の定義ですが、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「作用」とは、関数が外部に与えるあらゆる影響を指します。&lt;/li&gt;
&lt;li&gt;「主作用」とは、関数が戻り値を返すことを指します。&lt;/li&gt;
&lt;li&gt;「副作用」とは、主作用以外の作用を指します。&lt;/li&gt;
&lt;li&gt;「参照透過性」とは、式の作用を維持して、式と式の評価値を置換できる性質です。&lt;/li&gt;
&lt;li&gt;「純粋関数」とは、参照透過性を持つ関数です。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参照透過性とは、「式の作用を維持して、式と式の評価値を置換できる」という性質のことです。例として、単純な関数 f(a, b) = a + b があるとき、2 と 3 の和を求めるには x = f(2, 3) とします。このとき、x = 5 と置き換えてもプログラム全体に影響が出ないとすれば、その関数は参照透過性があるということになります。前述の例においては置換しても式の作用はそのままであるため、関数 f は参照透過であると言えます。&lt;/p&gt;
&lt;p&gt;次に、副作用を持つ関数 g(a, b)について考えます。これは関数 f と同様に和を算出しつつ、標準出力を実行するものとします。このとき x = g(2, 3) を x = 5 に置換した場合、副作用である標準出力が実行されなくなります。つまり、式の副作用が維持できていないため、関数 g は参照透過ではありません。&lt;/p&gt;
&lt;p&gt;さらに、状態変数に依存する関数 h(a, b) = a + b + c について考えます。関数 f と同様に和を算出しつつ、何らかの状態変数 c の値をさらに加算するものです。わかりやすいように、c の値は午前なら 0、午後なら 1 を返すとしましょう。このとき x = h(2, 3) を x = 5 に置換した場合、午前においては問題ないものの、午後になったら関数の主作用が異なってしまいます。つまり、式の主作用が維持できなくなってしまうため、関数 h は参照透過ではありません。&lt;/p&gt;
&lt;p&gt;結論として、参照透過であるためには、ステートレスかつエフェクトレスであることが必要十分条件です。つまり、関数から状態依存と副作用の両方を分離することで、それは純粋関数に昇華されるということです。&lt;/p&gt;
&lt;p&gt;よく「同じ入力に対して同じ出力を返すなら参照透過である」という文言を見かけますが、これは正確ではありません。これは参照透過であることではなく、ステートレスであることの性質だからです。ただし、「参照透過であるならば同じ入力に対して同じ出力を返す」というのは正しいです。なぜなら、参照透過であるならばステートレスであるためです。&lt;/p&gt;
&lt;h2&gt;おわりに&lt;/h2&gt;
&lt;p&gt;関数設計の品質向上は、プログラム全体の品質に大きく影響します。直結します。本記事で紹介した 4 つのポイントを意識して関数設計を行うことで、効率的な開発やメンテナンスが可能になります。また、純粋関数について理解し、その特性を活かすことで、さらなる品質向上が期待できます。関数設計に関するスキルを磨き、より高品質なコードを書くことを目指しましょう。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Scala言語の非同期処理の鍵を握るFuture型の理解と基本操作]]></title><description><![CDATA[Future 型のポイント Future 型が表現するもの Future 型は非同期処理の実行状態を表現する役割と例外を吸収するエフェクトフルコンテキストとしての役割を兼ね備えています。まとめると、Future 型が表現する状態は以下の…]]></description><link>https://gayamasan.github.io/scala-future-type/</link><guid isPermaLink="false">https://gayamasan.github.io/scala-future-type/</guid><pubDate>Sun, 26 Mar 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Future 型のポイント&lt;/h2&gt;
&lt;h3&gt;Future 型が表現するもの&lt;/h3&gt;
&lt;p&gt;Future 型は非同期処理の実行状態を表現する役割と例外を吸収するエフェクトフルコンテキストとしての役割を兼ね備えています。まとめると、Future 型が表現する状態は以下の 3 つのパターンになります。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;実行状態&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;成否状態&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Future 型の値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;実行中&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;実行完了&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;成功&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;実行結果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;実行完了&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;失敗&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;例外&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;非同期処理の実行状態を表現する役割&lt;/h4&gt;
&lt;p&gt;Future 型は、非同期処理が行われる際に使用されます。非同期処理を行った場合、その実行結果を知りたいという状況はよくあります。ここで、Future 型の役割は、非同期処理がまだ実行中で実行結果が利用できない状態か、それとも完了して実行結果が利用可能な状態かどうかを表現することです。&lt;/p&gt;
&lt;h4&gt;例外を吸収するエフェクトフルコンテキストとしての役割&lt;/h4&gt;
&lt;p&gt;Future は成功した場合に実行結果を保持し、失敗した場合には例外を保持するという Try 型の機能も持っています。Option 型を例外を吸収するためのエフェクトフルなコンテキストと解釈する場合、Try 型は単に失敗したという情報だけでなく、例外を保持することができるため、Option 型の上位互換と見ることができます。つまり、Future 型は Try 型と互換性があり、Future 型も例外を吸収するエフェクトフルなコンテキストであると言えます。&lt;/p&gt;
&lt;h3&gt;単一の Future 型の値に対して処理をしたいとき&lt;/h3&gt;
&lt;p&gt;まず、Future 型の値に対して処理を行いたい場合、その非同期処理が成功して完了している必要があります。これは、処理を開始する前に非同期処理を待つ必要があることを意味します。待ち方には、ブロッキングとノンブロッキングの 2 つの方法が存在します。&lt;/p&gt;
&lt;p&gt;ブロッキングの方法では、Await.result を使用しますが、ノンブロッキングの方法では、コンビネーターを利用します。ただし、原則としてブロッキングせず、ノンブロッキングに非同期処理を合成することが推奨されます。つまり、&lt;strong&gt;Await.result は原則として使用しないこと&lt;/strong&gt;です。逆に言うと、Await.result を使用する場合には、それ相応の根拠を用意する必要があります。&lt;/p&gt;
&lt;p&gt;代表的なノンブロッキングの方法としては、map コンビネーターがあります。Option 型の map コンビネーターでは、成功した場合（Some の場合）にのみ処理を行いますが、同様に、Future 型の map コンビネーターも、成功して完了した場合（Success の場合）にのみ処理を行います。&lt;/p&gt;
&lt;h4&gt;ブロッキングとノンブロッキングの挙動の違いについて&lt;/h4&gt;
&lt;p&gt;ブロッキングは Future 型の値を使おうとしている呼び出し側のスレッドが、その非同期処理が完了するまで待ち状態に入ることを意味します。一方、ノンブロッキングでは待ち状態に入らず、つまり、プログラムの処理は先に進みます。&lt;/p&gt;
&lt;h4&gt;ブロッキングをしてはいけない理由&lt;/h4&gt;
&lt;p&gt;非同期処理において、タスクの実行はスレッドプールを利用して行われます。Future 型を使って非同期処理を開始する際には、ExecutionContext が要求されますが、これはスレッドプールとして認識して問題ありません。ブロッキング処理を行うと、スレッドプール内の待機中のスレッドが占有されることになります。そのため、多くのスレッドがブロッキング処理を行うと、スレッドプール内の利用可能なスレッド数が減少します。利用可能なスレッドがなくなると、新たな非同期処理は即座に開始できず、遅延が発生します。さらに、利用可能なスレッドがない状況では、デッドロックのリスクも存在します。&lt;/p&gt;
&lt;h4&gt;それでもブロッキングをするというのであれば&lt;/h4&gt;
&lt;h5&gt;スレッドプールのスレッド枯渇を防ぐ措置が発動するかもしれない&lt;/h5&gt;
&lt;p&gt;一般的に使用される scala.concurrent.ExecutionContext.Implicits.global や Play Framework のデフォルトスレッドプールは、デフォルト設定で ForkJoinPool を採用しています。ForkJoinPool では、ブロッキングが検出された際に自動的に新しいスレッドが追加されるようになっています。ForkJoinPool にブロッキングを検知させる方法として、blocking 関数を使うことができます。ここで、Await.result は blocking を使用しています。つまり、Await.result による非同期処理の待機をした場合、そのスレッドプールのスレッドの数が増えますので、スレッド枯渇によるデッドロックや処理性能の低下は回避できます。しかし、スレッドプールのスレッド数を無限に増やし続けることはできませんし、新しいスレッドの作成にはシステムリソースを消費しますので、望ましくありません。&lt;/p&gt;
&lt;h5&gt;非同期処理自体がブロッキングを含む場合&lt;/h5&gt;
&lt;p&gt;非同期処理を待つためのブロッキング（Await.result）ではなく、その非同期処理がブロッキングな処理を呼び出す場合についてです。その場合は、その非同期処理内で blocking を呼び出さないと、前述したスレッド枯渇問題に陥る可能性があります。もしくは、別のスレッドプールを用意するという方法もあります。例えば、DB 接続を想定したとき、DB 接続用のコネクションプールのコネクション数が一定であれば、その数と同じスレッド数で固定するスレッドプールを用意するというものです。スレッドプールのスレッド数を固定する場合は、ForkJoinPool ではなく ThreadPoolExecutor を使用することで簡単に実現できます。&lt;/p&gt;
&lt;h5&gt;スレッドプールの状態を確認する方法&lt;/h5&gt;
&lt;p&gt;jstack コマンドを使用することで、スレッド情報やスタックトレースが取得できます。
多くのスレッドがブロックされている場合や、予想以上に多くのスレッドが生成されている場合は、異常が発生している可能性が高いです。また、アプリケーションがフリーズしたり、応答が遅くなったりした場合の調査でも役立つでしょう。&lt;/p&gt;
&lt;h3&gt;複数の Future 型の値に対して処理をしたいとき&lt;/h3&gt;
&lt;p&gt;初心者が陥りやすいのは、2 つの Future 型に対して処理をした結果、戻りの型が &lt;code class=&quot;language-text&quot;&gt;Future[Future[T]]&lt;/code&gt; のようにネストしてしまうことです。しかし、このネストしたものが表現するパターンは、以下のとおりです。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;外側の Future&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;内側の Future&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;全体的な状態&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;実行中&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;実行中&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;実行中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;実行中&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;成功完了&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;実行中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;実行中&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;失敗完了&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;実行中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;成功完了&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;実行中&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;実行中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;成功完了&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;成功完了&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;成功完了&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;成功完了&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;失敗完了&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;失敗完了&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;失敗完了&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;実行中&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;実行中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;失敗完了&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;成功完了&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;失敗完了&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;失敗完了&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;失敗完了&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;失敗完了&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;前提として、2 つの Future が両方とも成功して完了しなければ、全体が成功して完了した状態にはなりません。そのため、&lt;code class=&quot;language-text&quot;&gt;Future[Future[T]]&lt;/code&gt;が表現する状態は実質的に&lt;code class=&quot;language-text&quot;&gt;Future[T]&lt;/code&gt;と同じものになります。このことから、&lt;code class=&quot;language-text&quot;&gt;Future[Future[T]]&lt;/code&gt;を&lt;code class=&quot;language-text&quot;&gt;Future[T]&lt;/code&gt;に平坦化することが望ましいです。平坦化を行うためには flatMap コンビネーターを使用します。この平坦化できる性質はモナドという概念を表していることになります。&lt;/p&gt;
&lt;h4&gt;非同期処理の開始タイミングについて&lt;/h4&gt;
&lt;p&gt;非同期処理が開始されるタイミングによって処理性能が影響を受けることがあります。具体的には、非同期処理が開始されるのは Future#apply を呼び出した時であり、処理性能を意識する場合はこの開始タイミングに注意する必要があります。&lt;/p&gt;
&lt;p&gt;以下は、典型的なコード例です。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; execTaskA&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; execTaskB&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// タスクAが成功で完了した場合にタスクBが開始される&lt;/span&gt;
Future&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;execTaskA&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;flatMap&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_ &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt; Future&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;execTaskB&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;map&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_ &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// タスクAとタスクBは並列で処理される&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; taskA &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Future&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;execTaskA&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; taskB &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Future&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;execTaskB&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
taskA&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;flatMap&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_ &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt; taskB&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;map&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_ &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;for 式と flatMap の関係&lt;/h3&gt;
&lt;p&gt;Future 型においても for 式による flatMap の書き換えが可能です。詳細は省略します。&lt;/p&gt;
&lt;h2&gt;おわりに&lt;/h2&gt;
&lt;p&gt;本記事では、Scala 言語における非同期処理と Future 型の基本的な概念や使い方を紹介しました。根本的な考え方は Option 型と同じであるため、そちらも参考にしてください。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Scala言語の基礎確認用練習問題の解答]]></title><description><![CDATA[Scala basic exercise for beginners No.1 No.2 No.3 No.4 No.5 No.6 No.7 No.8 No.9 No.10]]></description><link>https://gayamasan.github.io/private/scala-exercise-answer/</link><guid isPermaLink="false">https://gayamasan.github.io/private/scala-exercise-answer/</guid><pubDate>Thu, 23 Mar 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Scala basic exercise for beginners&lt;/h2&gt;
&lt;h3&gt;No.1&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;xOpt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;flatMap&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;xi &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt; yOpt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;map&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;yi &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt; xi &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; yi&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;No.2&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;opt &lt;span class=&quot;token keyword&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; Some&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1000000000&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;-∞&quot;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; Some&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000000000&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;∞&quot;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; Some&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;            &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;N&quot;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; Some&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;           &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;0&quot;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; Some&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;            &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;P&quot;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; None                                &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;NaN&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;No.3&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  ai &lt;span class=&quot;token keyword&quot;&gt;&amp;lt;-&lt;/span&gt; aOpt
  bi &lt;span class=&quot;token keyword&quot;&gt;&amp;lt;-&lt;/span&gt; bOpt
  ci &lt;span class=&quot;token keyword&quot;&gt;&amp;lt;-&lt;/span&gt; cOpt
  di &lt;span class=&quot;token keyword&quot;&gt;&amp;lt;-&lt;/span&gt; dOpt
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  ai &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; bi &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; ci &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; di
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;No.4&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;integers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;flatten&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sum&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;No.5&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;durations&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;foldLeft&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Duration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Zero&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;acc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt; acc &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;No.6&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;usdjpy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;flatMap&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;uj &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt; eurusd&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;map&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;eu &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt; uj &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; eu&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;No.7&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;Future&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sequence&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;jpy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;map&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;api&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;map&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sum&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;No.8&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;usd&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;foldLeft&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Future&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;successful&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;BigDecimal&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;acc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; d&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt; acc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;flatMap&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt; RateLimitedApi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;call&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;d&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;map&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;No.9&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; toInt&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;str&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Try&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Try&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;str&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toInt&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;No.10&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; toIntAsync&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;str&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Future&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;scala&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;concurrent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;ExecutionContext&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Implicits&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;global
  Future&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;str&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toInt&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Scala言語の基礎確認用練習問題]]></title><description><![CDATA[Scala basic exercise for beginners No.1 任意の 2 つの整数形式の文字列の和を算出するメソッドを完成させてください。 No.…]]></description><link>https://gayamasan.github.io/scala-exercise/</link><guid isPermaLink="false">https://gayamasan.github.io/scala-exercise/</guid><pubDate>Thu, 23 Mar 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Scala basic exercise for beginners&lt;/h2&gt;
&lt;h3&gt;No.1&lt;/h3&gt;
&lt;p&gt;任意の 2 つの整数形式の文字列の和を算出するメソッドを完成させてください。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; add&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Option&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; xOpt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toIntOption
  &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; yOpt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toIntOption
  &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;No.2&lt;/h3&gt;
&lt;p&gt;整数形式を想定した任意の文字列について、以下の条件で返す文字列を決めるメソッドを完成させてください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整数以外の場合： &quot;Nan&quot;を返す&lt;/li&gt;
&lt;li&gt;0 の場合： &quot;0&quot;を返す&lt;/li&gt;
&lt;li&gt;正の整数の場合： &quot;P&quot;を返す&lt;/li&gt;
&lt;li&gt;負の整数の場合： &quot;N&quot;を返す&lt;/li&gt;
&lt;li&gt;-10 億以下の場合： &quot;-∞&quot;を返す&lt;/li&gt;
&lt;li&gt;10 億以上の場合： &quot;∞&quot;を返す&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; check&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; opt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toIntOption
  &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;No.3&lt;/h3&gt;
&lt;p&gt;整数形式を想定した任意の４つの文字列について、総和を算出するメソッドを完成させてください。ただしコレクションの使用は禁止します。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; sum&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; c&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; d&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Option&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; aOpt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toIntOption
  &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; bOpt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toIntOption
  &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; cOpt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toIntOption
  &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; dOpt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; d&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toIntOption
  &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;No.4&lt;/h3&gt;
&lt;p&gt;任意の数の整数形式の文字列を入力として受け取り、それらの値を合計した結果を返すメソッドを完成させてください。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; sum&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;strings&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; integers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; strings&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;map&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toIntOption&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;No.5&lt;/h3&gt;
&lt;p&gt;任意の数の有限時間を入力として受け取り、それらの時間をを合計した結果を返すメソッドを完成させてください。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; sum&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;durations&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Seq&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;FiniteDuration&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; FiniteDuration &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;No.6&lt;/h3&gt;
&lt;p&gt;非同期でドル円とユーロドルのレートを I/O で取得し、その結果をもとにユーロ円のレートを計算するメソッドを完成させてください。なお、ユーロ円のレートとは、1 ユーロを購入するために必要な円の額を表します。具体的には、ドルを購入し、そのドルを使って 1 ユーロを購入するためには、何円必要かを計算することになります。今回の例では、1 ドルを購入するのに 123.45 円が必要であり、1 ユーロを購入するのには 1.2345 ドルが必要です。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; calcEurJpyRate&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Future&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;BigDecimal&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;scala&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;concurrent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;ExecutionContext&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Implicits&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;global

  &lt;span class=&quot;token comment&quot;&gt;// ドル円のレートを非同期のI/O操作で取得することを想定&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; usdjpy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Future&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;successful&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;BigDecimal&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;123.45&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// ユーロドルのレートを非同期のI/O操作で取得することを想定&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; eurusd &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Future&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;successful&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;BigDecimal&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;1.2345&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// ユーロ円のレート&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; eurjpy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;

  eurjpy
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;No.7&lt;/h3&gt;
&lt;p&gt;為替レートを適用して入力された円をドルに変換する API があります。この API を非同期で呼び出して、ドルの合計値を計算するメソッドを完成させてください。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; sumDollar&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;jpy&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; BigDecimal&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Future&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;BigDecimal&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;scala&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;concurrent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;ExecutionContext&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Implicits&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;global

  &lt;span class=&quot;token comment&quot;&gt;// 為替レートを適用して入力された円をドルに変換するAPIを想定した関数&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; usdjpy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; BigDecimal&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;123.45&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; api &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;jpy&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; BigDecimal&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt; Future&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;successful&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;jpy &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; usdjpy&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 合計値&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; sum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;

  sum
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;No.8&lt;/h3&gt;
&lt;p&gt;為替レートを適用して入力されたドルをユーロに変換する API があります。この API を使用して、ユーロの合計値を計算するメソッドを完成させてください。ただし、ユーロドルに関する API には多くのアクセスがあるため、リクエストのレート制限がかかっており、同時に API を呼び出すことができません。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; sumEuro&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;usd&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; BigDecimal&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Future&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;BigDecimal&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;scala&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;concurrent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;ExecutionContext&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Implicits&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;global

  &lt;span class=&quot;token comment&quot;&gt;// 為替レートを適用して入力されたドルをユーロに変換するAPIを想定したオブジェクト&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;object&lt;/span&gt; RateLimitedApi &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; available &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; lockFor&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;millisSec&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      available &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
      Thread&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sleep&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;millisSec&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      available &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; eurusd &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; BigDecimal&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;1.2345&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; call&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;usd&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; BigDecimal&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Future&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;BigDecimal&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Future &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      assert&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;available&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      lockFor&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      usd &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; eurusd
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 合計値&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; sum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;

  sum
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;No.9&lt;/h3&gt;
&lt;p&gt;以下の文字列を整数に変換する関数は機能的に問題ありませんが、冗長で不適切です。機能を維持しながら、よりシンプルな実装に切り替えてください。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; toInt&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;str&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Either&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Throwable&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    Right&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;str&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toInt&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; e&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Throwable &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt; Left&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;No.10&lt;/h3&gt;
&lt;p&gt;以下の文字列を整数に非同期で変換する関数は機能的に問題ありませんが、冗長で不適切です。機能を維持しながら、よりシンプルな実装に切り替えてください。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; toIntAsync&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;str&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Future&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Try&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;scala&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;concurrent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;ExecutionContext&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Implicits&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;global
  Future&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Try&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;str&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toInt&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Scala初心者必見！Option型の本質と基本操作]]></title><description><![CDATA[Option 型のポイント Option 型の本質 プログラミング中に Option 型に遭遇した場合、次の 2 つの解釈ができます。1 つ目は、ある値が存在するかどうかを表現したものです。これは単純に、値が存在する場合は Some となり、値が存在しない場合は None…]]></description><link>https://gayamasan.github.io/scala-option-type/</link><guid isPermaLink="false">https://gayamasan.github.io/scala-option-type/</guid><pubDate>Mon, 20 Mar 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Option 型のポイント&lt;/h2&gt;
&lt;h3&gt;Option 型の本質&lt;/h3&gt;
&lt;p&gt;プログラミング中に Option 型に遭遇した場合、次の 2 つの解釈ができます。1 つ目は、ある値が存在するかどうかを表現したものです。これは単純に、値が存在する場合は Some となり、値が存在しない場合は None となります。2 つ目は、例外ハンドリング結果を表現したものです。正常に実行できた場合は Some となり、プログラムの実行中に意図した例外が発生した場合には None となります。&lt;/p&gt;
&lt;p&gt;Option 型を抽象化した概念の 1 つに、エフェクトを閉じ込めることができるエフェクトフルコンテキストがあります。エフェクトとは、例外などの副作用で関数の純粋性を欠く要素のことです。エフェクトフルコンテキストを導入することで、関数を純粋なものにすることが可能になります。ここで、例外は純粋性を損なうエフェクトであり、Option 型はそれを吸収する役割を担っています。つまり、Option 型の本質は、例外というエフェクトを吸収し純粋関数を作成するための手段であることです。&lt;/p&gt;
&lt;h3&gt;単一の Option 型の値に対して処理をしたいとき&lt;/h3&gt;
&lt;p&gt;初心者がやりがちなのは、Option 型の値を取り出そうとすることですが、これは誤った発想です。代わりに、Option 型の値を変換する発想が必要です。Option 型の値を変換するには、map コンビネーターを使用することで実現できます。また、他にも Option 型から値を取り出さずに処理を行うコンビネーターが提供されていますので、こちらを使用することをおすすめします。ただし最終的にはどこかのタイミングで Option 型から値を取り出す必要がありますが、可能な限りそのタイミングは遅らせるべきです。&lt;/p&gt;
&lt;h3&gt;複数の Option 型の値に対して処理をしたいとき&lt;/h3&gt;
&lt;p&gt;初心者が陥りやすいのは、2 つの Option 型に対して処理をした結果、戻りの型が &lt;code class=&quot;language-text&quot;&gt;Option[Option[T]]&lt;/code&gt; のようにネストしてしまうことです。しかし、このネストしたものが表現するパターンは、以下のとおりです。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;外側の Option&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;内側の Option&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;実質的に値があるかどうか&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Some&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Some&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;ある（Some）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Some&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;None&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;ない（None）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;None&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;ない（None）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;また、Option 型には別の解釈方法もあり、最大要素数が 1 のコレクションとして捉えることができます。この場合、&lt;code class=&quot;language-text&quot;&gt;Option[Option[T]]&lt;/code&gt;の全体の要素数は以下のとおりです。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;外側の要素数&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;内側の要素数&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;全体の要素数&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1（Some）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0（None）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;0&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0（None）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;つまり、実質的には Some か None の 2 通りしかありませんので、&lt;code class=&quot;language-text&quot;&gt;Option[Option[T]]&lt;/code&gt; を &lt;code class=&quot;language-text&quot;&gt;Option[T]&lt;/code&gt; と平坦化することが望ましいです。この平坦化を実現するには、flatMap コンビネーターを使用することで簡単に実現できます。&lt;/p&gt;
&lt;p&gt;実務的には、まずは map コンビネーターを使って処理をしてみて、戻り値が &lt;code class=&quot;language-text&quot;&gt;Option[Option[T]]&lt;/code&gt; のようになってしまった場合は、外側の map を flatMap に変更することで解決できます。&lt;/p&gt;
&lt;p&gt;このように &lt;code class=&quot;language-text&quot;&gt;Option[Option[T]]&lt;/code&gt; を &lt;code class=&quot;language-text&quot;&gt;Option[T]&lt;/code&gt; に変換できる性質を含めた抽象化された概念をモナドと呼びます。つまり、flatMap とはモナドという概念を表していることになります。&lt;/p&gt;
&lt;h3&gt;for 式と flatMap の関係&lt;/h3&gt;
&lt;p&gt;初心者が誤解しやすいのは、Scala の for 式をループ処理の指定だと勘違いしていることです。しかし、Scala の for 式においてはその発想をまず捨ててください。for 式の本質は flatMap の書き換えであり、ループ処理ではありません。flatMap の階層が深くなってきた場合には、for 式に書き換えることをおすすめします。&lt;/p&gt;
&lt;p&gt;以下に Option 型に対して for 式を適用した具体例を示します。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; iOpt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Some&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; jOpt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Some&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; kOpt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Some&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// flatMapで平坦化&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  iOpt flatMap &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt;
    jOpt flatMap &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; j &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt;
      kOpt map &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; k &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; sum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; k
        sum
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// for式で平坦化&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  i &lt;span class=&quot;token keyword&quot;&gt;&amp;lt;-&lt;/span&gt; iOpt &lt;span class=&quot;token comment&quot;&gt;// #flatMap&lt;/span&gt;
  j &lt;span class=&quot;token keyword&quot;&gt;&amp;lt;-&lt;/span&gt; jOpt &lt;span class=&quot;token comment&quot;&gt;// #flatMap&lt;/span&gt;
  k &lt;span class=&quot;token keyword&quot;&gt;&amp;lt;-&lt;/span&gt; kOpt &lt;span class=&quot;token comment&quot;&gt;// #map&lt;/span&gt;
  sum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; k
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  sum
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// flatMapで平坦化した a と for式で平坦化した b は全く同じ&lt;/span&gt;
println&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Some(6)&lt;/span&gt;
println&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Some(6)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Option 型に対してパターンマッチングを使うべきか&lt;/h3&gt;
&lt;p&gt;原則として、Option 型に対してパターンマッチングを使用するべきではありませんが、柔軟な条件分岐が要求される場合は例外となります。Option 型には様々なコンビネータが用意されており、計算結果の合成が容易で、チェーン操作により直感的な実装が可能であり、可読性が向上します。一方で、簡単なシチュエーションでパターンマッチングを使用すると、冗長なコードになり可読性が低下することがあります。&lt;/p&gt;
&lt;p&gt;以下は、典型的な悪いコード例です。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; opt&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Option&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Some&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

opt &lt;span class=&quot;token keyword&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; Some&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt; Some&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; None &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt; None
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;関数シグネチャとして Option 型を使うべきか&lt;/h3&gt;
&lt;p&gt;関数シグネチャに Option 型は存在しない方が望ましいです。つまり、関数への入力値は必ず存在し、関数から返す値も必ず存在することが望ましいということです。ただし、実際にはプログラミングにおいて、一度でも Option 型に関わった場合、Option 型が付きまとうことがあります。そのため、関数の出力に Option 型が存在するのは一般的で、これは意図した例外が発生する可能性があることを示唆しています。一方、関数の入力に Option 型が存在する場合は、設計が適切でない可能性が高いです。&lt;/p&gt;
&lt;h2&gt;おわりに&lt;/h2&gt;
&lt;p&gt;本記事では、Option 型について説明しましたが、抽象化された概念は他の型（Future 型など）にも適用できるため、これらの型の役割や取り扱い方法を理解するためにも重要です。&lt;/p&gt;</content:encoded></item></channel></rss>