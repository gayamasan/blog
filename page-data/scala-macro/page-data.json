{"componentChunkName":"component---src-templates-blog-post-js","path":"/scala-macro/","result":{"data":{"site":{"siteMetadata":{"title":"Blog"}},"markdownRemark":{"id":"4494b12a-c2ac-5a8a-8145-f554a2363b13","excerpt":"はじめに Scala のマクロは、通常の開発においてはあまり使用されることがないため、Scala 初心者が学習する必要はありません。しかし、独自の仕組みやツールを作成する際には、マクロは非常に強力な武器となります。本記事は Scala 2 系を前提として説明しています。 マクロを実装するまでの道 Scala…","html":"<h2>はじめに</h2>\n<p>Scala のマクロは、通常の開発においてはあまり使用されることがないため、Scala 初心者が学習する必要はありません。しかし、独自の仕組みやツールを作成する際には、マクロは非常に強力な武器となります。本記事は Scala 2 系を前提として説明しています。</p>\n<h2>マクロを実装するまでの道</h2>\n<h3>Scala で提供されているリフレクションについて</h3>\n<p>マクロを理解するためには、まずリフレクションについて触れる必要があります。</p>\n<p>Scala では、リフレクションにはランタイムリフレクションとコンパイルタイムリフレクションの 2 つがあります。<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>\nコンパイルタイムリフレクションを利用することで、抽象構文木（AST: Abstract Syntax Tree）を変更したり作成したりすることができます。<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>\nこれにより、抽象構文木を操作できることから、メタプログラミングが可能になります。そして、マクロはコンパイルタイムリフレクションを利用して実現される機能です。</p>\n<p>マクロを使うことで、例えばボイラープレートコードの排除ができます。一方、マクロを多用すると、コンパイルが遅くなる要因になることがあるため、注意が必要です。\nまた、マクロに詳しい人はそれほど多くないため、詳しい人がいなくなった場合には、調査や改修の難易度が上がることがあります。</p>\n<h3>抽象構文木とその操作方法</h3>\n<p>抽象構文木とは、プログラムの構文をツリー状に表現したものです。簡単に言うと、ソースコードを解析して得られるデータ構造です。</p>\n<p>以下に例を示します。</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> plus<span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> y</code></pre></div>\n<p>この関数の、<code class=\"language-text\">x + y</code> の部分の抽象構文木を確認してみます。</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span>runtime<span class=\"token punctuation\">.</span>universe<span class=\"token punctuation\">.</span></span>_\nshowRaw<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token id function\">q</span><span class=\"token string\">\"x + y\"</span></span><span class=\"token punctuation\">)</span>\n\nres1<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> Apply<span class=\"token punctuation\">(</span>Select<span class=\"token punctuation\">(</span>Ident<span class=\"token punctuation\">(</span>TermName<span class=\"token punctuation\">(</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> TermName<span class=\"token punctuation\">(</span><span class=\"token string\">\"$plus\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> List<span class=\"token punctuation\">(</span>Ident<span class=\"token punctuation\">(</span>TermName<span class=\"token punctuation\">(</span><span class=\"token string\">\"y\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>またメソッド全体の抽象構文木は次のようになります。</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span>runtime<span class=\"token punctuation\">.</span>universe<span class=\"token punctuation\">.</span></span>_\nshowRaw<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token id function\">q</span><span class=\"token string\">\"def plus(x: Int, y: Int): Int = x + y\"</span></span><span class=\"token punctuation\">)</span>\n\nres2<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> DefDef<span class=\"token punctuation\">(</span>Modifiers<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> TermName<span class=\"token punctuation\">(</span><span class=\"token string\">\"plus\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> List<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> List<span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">(</span>ValDef<span class=\"token punctuation\">(</span>Modifiers<span class=\"token punctuation\">(</span>PARAM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> TermName<span class=\"token punctuation\">(</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Ident<span class=\"token punctuation\">(</span>TypeName<span class=\"token punctuation\">(</span><span class=\"token string\">\"Int\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> EmptyTree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ValDef<span class=\"token punctuation\">(</span>Modifiers<span class=\"token punctuation\">(</span>PARAM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> TermName<span class=\"token punctuation\">(</span><span class=\"token string\">\"y\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Ident<span class=\"token punctuation\">(</span>TypeName<span class=\"token punctuation\">(</span><span class=\"token string\">\"Int\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> EmptyTree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Ident<span class=\"token punctuation\">(</span>TypeName<span class=\"token punctuation\">(</span><span class=\"token string\">\"Int\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Apply<span class=\"token punctuation\">(</span>Select<span class=\"token punctuation\">(</span>Ident<span class=\"token punctuation\">(</span>TermName<span class=\"token punctuation\">(</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> TermName<span class=\"token punctuation\">(</span><span class=\"token string\">\"$plus\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> List<span class=\"token punctuation\">(</span>Ident<span class=\"token punctuation\">(</span>TermName<span class=\"token punctuation\">(</span><span class=\"token string\">\"y\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>メタプログラミングを行う場合、これらのような、抽象構文木を作成したり、変更したりすることで実現します。ここで、より簡単に AST を操作する方法があります。\nそれが <strong><em>準クォート（Quasiquotes）</em></strong> と呼ばれる表記法です。例えば、前述の例の <code class=\"language-text\">q\"...\"</code> がその表記法です。詳細な使い方は公式ドキュメントを参照してください。<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup></p>\n<h3>マクロの実装</h3>\n<p>例として、実践では使うことはないようなマクロではありますが、ここでは足し算をするマクロを実装してみます。</p>\n<p>まず公式ドキュメントに倣って書くと次のようになります。<sup id=\"fnref-4\"><a href=\"#fn-4\" class=\"footnote-ref\">4</a></sup></p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>language<span class=\"token punctuation\">.</span>experimental<span class=\"token punctuation\">.</span>macros</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span>macros<span class=\"token punctuation\">.</span></span>Context\n\n<span class=\"token keyword\">object</span> PlusMacros <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">def</span> plus<span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> macro plusImpl\n\n  <span class=\"token keyword\">def</span> plusImpl<span class=\"token punctuation\">(</span>c<span class=\"token operator\">:</span> Context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> c<span class=\"token punctuation\">.</span>Expr<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> c<span class=\"token punctuation\">.</span>Expr<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> c<span class=\"token punctuation\">.</span>Expr<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">import</span> <span class=\"token namespace\">c<span class=\"token punctuation\">.</span>universe<span class=\"token punctuation\">.</span></span>_\n    reify<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>splice <span class=\"token operator\">+</span> y<span class=\"token punctuation\">.</span>splice<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>準クォートを使った表記法に書き換えると次のようになります。</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">object</span> PlusMacros <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">def</span> plus<span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> macro plusImpl\n\n  <span class=\"token keyword\">def</span> plusImpl<span class=\"token punctuation\">(</span>c<span class=\"token operator\">:</span> Context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> c<span class=\"token punctuation\">.</span>Expr<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> c<span class=\"token punctuation\">.</span>Expr<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> c<span class=\"token punctuation\">.</span>Expr<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">import</span> <span class=\"token namespace\">c<span class=\"token punctuation\">.</span>universe<span class=\"token punctuation\">.</span></span>_\n    c<span class=\"token punctuation\">.</span>Expr<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token id function\">q</span><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">x</span></span><span class=\"token string\"> + </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">y</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>さらに、scala 2.11 以降では <code class=\"language-text\">c.Expr[Int]</code> を <code class=\"language-text\">c.Tree</code> として次のように書くこともできます。</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">object</span> PlusMacros <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">def</span> plus<span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> macro plusImpl\n\n  <span class=\"token keyword\">def</span> plusImpl<span class=\"token punctuation\">(</span>c<span class=\"token operator\">:</span> Context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> c<span class=\"token punctuation\">.</span>Tree<span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> c<span class=\"token punctuation\">.</span>Tree<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> c<span class=\"token punctuation\">.</span>Tree <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">import</span> <span class=\"token namespace\">c<span class=\"token punctuation\">.</span>universe<span class=\"token punctuation\">.</span></span>_\n    <span class=\"token string-interpolation\"><span class=\"token id function\">q</span><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">x</span></span><span class=\"token string\"> + </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">y</span></span><span class=\"token string\">\"</span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>これに加えてマクロバンドルを使うと次のようになります。</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">object</span> PlusMacros <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">def</span> plus<span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> macro PlusMacrosImpl<span class=\"token punctuation\">.</span>plusImpl\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> PlusMacrosImpl<span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> c<span class=\"token operator\">:</span> Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">import</span> <span class=\"token namespace\">c<span class=\"token punctuation\">.</span>universe<span class=\"token punctuation\">.</span></span>_\n\n  <span class=\"token keyword\">def</span> plusImpl<span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> c<span class=\"token punctuation\">.</span>Tree<span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> c<span class=\"token punctuation\">.</span>Tree<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> c<span class=\"token punctuation\">.</span>Tree <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token id function\">q</span><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">x</span></span><span class=\"token string\"> + </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">y</span></span><span class=\"token string\">\"</span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>このときマクロを使用する側では次のようになります。</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token comment\">// ソースコードの段階</span>\n<span class=\"token keyword\">val</span> sum <span class=\"token operator\">=</span> PlusMacros<span class=\"token punctuation\">.</span>plus<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// コンパイルをした段階</span>\n<span class=\"token keyword\">val</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span></code></pre></div>\n<p><strong>注意点として、マクロは一番最初にコンパイルする必要があります。</strong></p>\n<h3>マクロアノテーション</h3>\n<p>マクロアノテーションとは、自作のアノテーションを付与するだけでマクロを展開できる仕組みです。\n例として、アノテーションを付けたメソッドに対して事前処理を割り込ませる仕組みを実装してみます。\n全体の流れとしては、共通処理を用意しておき、それをマクロを使って割り込ませる方式をとります。ここでは、事前処理はログ出力をするものとします。</p>\n<p>まず、次のようなログ出力を割り込ませるための共通処理を関数として用意しておきます。具体的な実装は省略します。</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">object</span> Logging <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> before<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span> T<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> T <span class=\"token operator\">=</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">?</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>つぎに、マクロアノテーションの作成です。</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">class</span> BeforeLogging <span class=\"token keyword\">extends</span> StaticAnnotation <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> macroTransform<span class=\"token punctuation\">(</span>annottees<span class=\"token operator\">:</span> <span class=\"token builtin\">Any</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Any</span> <span class=\"token operator\">=</span> macro BeforeLoggingMacroImpl<span class=\"token punctuation\">.</span>impl\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>続いて、マクロの実装です。ただし見通しを良くするため作り込んではいません。</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">class</span> BeforeLoggingMacroImpl<span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> c<span class=\"token operator\">:</span> Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">import</span> <span class=\"token namespace\">c<span class=\"token punctuation\">.</span>universe<span class=\"token punctuation\">.</span></span>_\n\n  <span class=\"token keyword\">def</span> impl<span class=\"token punctuation\">(</span>annottees<span class=\"token operator\">:</span> Tree<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Tree <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// マクロアノテーションを付与したメソッドの抽象構文木を取得します</span>\n    <span class=\"token keyword\">val</span> method <span class=\"token operator\">=</span> annottees<span class=\"token punctuation\">.</span>head\n\n    <span class=\"token comment\">// パターンマッチで各パーツを抽出します。</span>\n    <span class=\"token keyword\">val</span> <span class=\"token string-interpolation\"><span class=\"token id function\">q</span><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">mods</span></span><span class=\"token string\"> def </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">name</span></span><span class=\"token string\">[..</span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">tparams</span></span><span class=\"token string\">](...</span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">paramss</span></span><span class=\"token string\">): </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">tpt</span></span><span class=\"token string\"> = </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">body</span></span><span class=\"token string\">\"</span></span> <span class=\"token operator\">=</span> method\n\n    <span class=\"token comment\">// 共通処理を元の本体に埋め込みます</span>\n    <span class=\"token keyword\">val</span> newBody <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token id function\">q</span><span class=\"token string\">\"Logging.before { </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">body</span></span><span class=\"token string\"> }\"</span></span>\n\n    <span class=\"token comment\">// 共通処理を埋め込んだ本体を含めた新しい抽象構文木を返します</span>\n    <span class=\"token string-interpolation\"><span class=\"token id function\">q</span><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">mods</span></span><span class=\"token string\"> def </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">name</span></span><span class=\"token string\">[..</span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">tparams</span></span><span class=\"token string\">](...</span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">paramss</span></span><span class=\"token string\">): </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">tpt</span></span><span class=\"token string\"> = </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">newBody</span></span><span class=\"token string\">\"</span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>最後に、マクロアノテーションの利用側の実装です。次のようにアノテーションを付与するだけで、事前に準備した処理を割り込ませることができます。</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> doSomething<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token annotation punctuation\">@BeforeLogging</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">def</span> doSomething<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Do something.\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>おわりに</h2>\n<p>本記事ではベストプラクティスとはいえないものを含んでいる可能性がありますのでご了承ください。</p>\n<h2>脚注</h2>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\"><a href=\"https://docs.scala-lang.org/overviews/reflection/overview.html\">公式ドキュメント</a>より<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a></li>\n<li id=\"fn-2\"><a href=\"https://docs.scala-lang.org/overviews/reflection/symbols-trees-types.html#trees\">公式ドキュメント</a>より<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a></li>\n<li id=\"fn-3\"><a href=\"https://docs.scala-lang.org/overviews/quasiquotes/intro.html\">公式ドキュメント</a>より<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a></li>\n<li id=\"fn-4\"><a href=\"https://docs.scala-lang.org/overviews/macros/overview.html\">公式ドキュメント</a>より<a href=\"#fnref-4\" class=\"footnote-backref\">↩</a></li>\n</ol>\n</div>","frontmatter":{"title":"Scala上級者向けのマクロ入門","date":"March 30, 2023","description":"この記事では、Scalaのマクロを利用したメタプログラミングを初心者にも分かりやすく解説しています。また、リフレクションや抽象構文木についても説明し、Scalaのマクロを理解する上での基礎知識を提供しています。具体的なマクロの使い方についても解説しています。","tags":["Scala"]}},"previous":{"fields":{"slug":"/function-design/"},"frontmatter":{"title":"雑兵と精鋭の分水嶺！関数のつくりかた"}},"next":{"fields":{"slug":"/scala-compile-tuning/"},"frontmatter":{"title":"Scalaプロジェクトのコンパイル時間を短縮するヒント"}}},"pageContext":{"id":"4494b12a-c2ac-5a8a-8145-f554a2363b13","previousPostId":"02a10a8d-9b3e-5d7a-b736-cda82de2ac9b","nextPostId":"3fe996dc-98ca-5dad-b0a7-5a908c97ebdd"}},"staticQueryHashes":["3000541721","3274528899"],"slicesMap":{}}