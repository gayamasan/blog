{"componentChunkName":"component---src-templates-blog-post-js","path":"/scala-exercise/","result":{"data":{"site":{"siteMetadata":{"title":"Blog"}},"markdownRemark":{"id":"599a6860-28d5-549d-8ac7-a16ff964f235","excerpt":"Scala basic exercise for beginners No.1 任意の 2 つの整数形式の文字列の和を算出するメソッドを完成させてください。 No.2 整数形式を想定した任意の文字列について、以下の条件で返す文字列を決めるメソッドを完成させてください。 整数以外の場合： \"Nan\"を返す…","html":"<h2>Scala basic exercise for beginners</h2>\n<h3>No.1</h3>\n<p>任意の 2 つの整数形式の文字列の和を算出するメソッドを完成させてください。</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> add<span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Option<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> xOpt <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>toIntOption\n  <span class=\"token keyword\">val</span> yOpt <span class=\"token operator\">=</span> y<span class=\"token punctuation\">.</span>toIntOption\n  <span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">?</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>No.2</h3>\n<p>整数形式を想定した任意の文字列について、以下の条件で返す文字列を決めるメソッドを完成させてください。</p>\n<ul>\n<li>整数以外の場合： \"Nan\"を返す</li>\n<li>0 の場合： \"0\"を返す</li>\n<li>正の整数の場合： \"P\"を返す</li>\n<li>負の整数の場合： \"N\"を返す</li>\n<li>-10 億以下の場合： \"-∞\"を返す</li>\n<li>10 億以上の場合： \"∞\"を返す</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> check<span class=\"token punctuation\">(</span>s<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> opt <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>toIntOption\n  <span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">?</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>No.3</h3>\n<p>整数形式を想定した任意の４つの文字列について、総和を算出するメソッドを完成させてください。ただしコレクションの使用は禁止します。</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> sum<span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> d<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Option<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> aOpt <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>toIntOption\n  <span class=\"token keyword\">val</span> bOpt <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>toIntOption\n  <span class=\"token keyword\">val</span> cOpt <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>toIntOption\n  <span class=\"token keyword\">val</span> dOpt <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>toIntOption\n  <span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">?</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>No.4</h3>\n<p>任意の数の整数形式の文字列を入力として受け取り、それらの値を合計した結果を返すメソッドを完成させてください。</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> sum<span class=\"token punctuation\">(</span>strings<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> integers <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>s <span class=\"token keyword\">=></span> s<span class=\"token punctuation\">.</span>toIntOption<span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">?</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>No.5</h3>\n<p>任意の数の有限時間を入力として受け取り、それらの時間をを合計した結果を返すメソッドを完成させてください。</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> sum<span class=\"token punctuation\">(</span>durations<span class=\"token operator\">:</span> Seq<span class=\"token punctuation\">[</span>FiniteDuration<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> FiniteDuration <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">?</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>No.6</h3>\n<p>非同期でドル円とユーロドルのレートを I/O で取得し、その結果をもとにユーロ円のレートを計算するメソッドを完成させてください。なお、ユーロ円のレートとは、1 ユーロを購入するために必要な円の額を表します。具体的には、ドルを購入し、そのドルを使って 1 ユーロを購入するためには、何円必要かを計算することになります。今回の例では、1 ドルを購入するのに 123.45 円が必要であり、1 ユーロを購入するのには 1.2345 ドルが必要です。</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> calcEurJpyRate<span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span>BigDecimal<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span>ExecutionContext<span class=\"token punctuation\">.</span>Implicits<span class=\"token punctuation\">.</span>global\n\n  <span class=\"token comment\">// ドル円のレートを非同期のI/O操作で取得することを想定</span>\n  <span class=\"token keyword\">val</span> usdjpy <span class=\"token operator\">=</span> Future<span class=\"token punctuation\">.</span>successful<span class=\"token punctuation\">(</span>BigDecimal<span class=\"token punctuation\">(</span><span class=\"token string\">\"123.45\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// ユーロドルのレートを非同期のI/O操作で取得することを想定</span>\n  <span class=\"token keyword\">val</span> eurusd <span class=\"token operator\">=</span> Future<span class=\"token punctuation\">.</span>successful<span class=\"token punctuation\">(</span>BigDecimal<span class=\"token punctuation\">(</span><span class=\"token string\">\"1.2345\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// ユーロ円のレート</span>\n  <span class=\"token keyword\">val</span> eurjpy <span class=\"token operator\">=</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">?</span>\n\n  eurjpy\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>No.7</h3>\n<p>為替レートを適用して入力された円をドルに変換する API があります。この API を非同期で呼び出して、ドルの合計値を計算するメソッドを完成させてください。</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> sumDollar<span class=\"token punctuation\">(</span>jpy<span class=\"token operator\">:</span> BigDecimal<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span>BigDecimal<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span>ExecutionContext<span class=\"token punctuation\">.</span>Implicits<span class=\"token punctuation\">.</span>global\n\n  <span class=\"token comment\">// 為替レートを適用して入力された円をドルに変換するAPIを想定した関数</span>\n  <span class=\"token keyword\">val</span> usdjpy <span class=\"token operator\">=</span> BigDecimal<span class=\"token punctuation\">(</span><span class=\"token string\">\"123.45\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">val</span> api <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>jpy<span class=\"token operator\">:</span> BigDecimal<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> Future<span class=\"token punctuation\">.</span>successful<span class=\"token punctuation\">(</span>jpy <span class=\"token operator\">*</span> usdjpy<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 合計値</span>\n  <span class=\"token keyword\">val</span> sum <span class=\"token operator\">=</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">?</span>\n\n  sum\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>No.8</h3>\n<p>為替レートを適用して入力されたドルをユーロに変換する API があります。この API を使用して、ユーロの合計値を計算するメソッドを完成させてください。ただし、ユーロドルに関する API には多くのアクセスがあるため、リクエストのレート制限がかかっており、同時に API を呼び出すことができません。</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> sumEuro<span class=\"token punctuation\">(</span>usd<span class=\"token operator\">:</span> BigDecimal<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span>BigDecimal<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span>ExecutionContext<span class=\"token punctuation\">.</span>Implicits<span class=\"token punctuation\">.</span>global\n\n  <span class=\"token comment\">// 為替レートを適用して入力されたドルをユーロに変換するAPIを想定したオブジェクト</span>\n  <span class=\"token keyword\">object</span> RateLimitedApi <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> available <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">def</span> lockFor<span class=\"token punctuation\">(</span>millisSec<span class=\"token operator\">:</span> <span class=\"token builtin\">Long</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      available <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n      Thread<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span>millisSec<span class=\"token punctuation\">)</span>\n      available <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> eurusd <span class=\"token operator\">=</span> BigDecimal<span class=\"token punctuation\">(</span><span class=\"token string\">\"1.2345\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> call<span class=\"token punctuation\">(</span>usd<span class=\"token operator\">:</span> BigDecimal<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span>BigDecimal<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Future <span class=\"token punctuation\">{</span>\n      assert<span class=\"token punctuation\">(</span>available<span class=\"token punctuation\">)</span>\n      lockFor<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n      usd <span class=\"token operator\">*</span> eurusd\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 合計値</span>\n  <span class=\"token keyword\">val</span> sum <span class=\"token operator\">=</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">?</span>\n\n  sum\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>No.9</h3>\n<p>以下の文字列を整数に変換する関数は機能的に問題ありませんが、冗長で不適切です。機能を維持しながら、よりシンプルな実装に切り替えてください。</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> toInt<span class=\"token punctuation\">(</span>str<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Either<span class=\"token punctuation\">[</span>Throwable<span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    Right<span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span>toInt<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> e<span class=\"token operator\">:</span> Throwable <span class=\"token keyword\">=></span> Left<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>No.10</h3>\n<p>以下の文字列を整数に非同期で変換する関数は機能的に問題ありませんが、冗長で不適切です。機能を維持しながら、よりシンプルな実装に切り替えてください。</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> toIntAsync<span class=\"token punctuation\">(</span>str<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span>Try<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span>ExecutionContext<span class=\"token punctuation\">.</span>Implicits<span class=\"token punctuation\">.</span>global\n  Future<span class=\"token punctuation\">(</span>Try<span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span>toInt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Scala言語の基礎確認用練習問題","date":"March 23, 2023","description":"Scalaプログラマーが「Scalaらしいコード」を書くことができるかどうかを確認するための練習問題です。","tags":["Scala","Exercise"]}},"previous":{"fields":{"slug":"/private/scala-exercise-answer/"},"frontmatter":{"title":"Scala言語の基礎確認用練習問題の解答"}},"next":{"fields":{"slug":"/scala-future-type/"},"frontmatter":{"title":"Scala言語の非同期処理の鍵を握るFuture型の理解と基本操作"}}},"pageContext":{"id":"599a6860-28d5-549d-8ac7-a16ff964f235","previousPostId":"345025a4-ff06-5bc6-99cc-5fde14b4e7eb","nextPostId":"e5d3f4b6-efb6-5ca2-874b-8bca931927c5"}},"staticQueryHashes":["3000541721","3274528899"],"slicesMap":{}}