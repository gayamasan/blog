{"componentChunkName":"component---src-templates-blog-post-js","path":"/scala-compile-tuning/","result":{"data":{"site":{"siteMetadata":{"title":"Blog"}},"markdownRemark":{"id":"3fe996dc-98ca-5dad-b0a7-5a908c97ebdd","excerpt":"はじめに まずは、前提として理解しておくべき事項を説明します。 ライブラリ依存関係の解決 sbt…","html":"<h2>はじめに</h2>\n<p>まずは、前提として理解しておくべき事項を説明します。</p>\n<h3>ライブラリ依存関係の解決</h3>\n<p>sbt を用いて <code class=\"language-text\">compile</code> を実行すると、必要に応じてライブラリの依存関係解決（<code class=\"language-text\">update</code>）が行われます。\n依存関係解決が完了した後、ソースコードのコンパイルが開始されます。\nそのため、<code class=\"language-text\">compile</code>が遅い場合は、依存関係解決が遅いのか、ソースコードのコンパイルが遅いのかを判断する必要があります。</p>\n<p>ここで、ライブラリの依存関係解決とは、プロジェクトが必要とする外部ライブラリをダウンロードし、プロジェクト内で利用可能にすることを意味します。\nただし、ライブラリの依存関係が解決済みの場合は、キャッシュされた結果が使用されます。\nライブラリの依存関係のキャッシュは、デフォルトでユーザーのホームディレクトリ内の<code class=\"language-text\">.ivy2</code>ディレクトリに保存されます。</p>\n<h3>増分コンパイル</h3>\n<p>sbt では増分コンパイルが採用されています。増分コンパイルとは、変更されたソースコードのみをコンパイルし、変更されていないコードは前回のコンパイル結果を再利用する方法です。\nこれにより、コンパイル時間が短縮されます。一方、前回のコンパイル結果を再利用せずフルコンパイルを行う場合は、<code class=\"language-text\">clean</code>を実行して前回のコンパイル結果を削除することで実現できます。\nコンパイル時間を計測する際は、フルコンパイルの時間を測定する必要があります。</p>\n<h3>コンパイル時間の計測方法</h3>\n<p>sbt のオプション <code class=\"language-text\">-Dsbt.task.timings=true</code> を使用して、簡易的な所要時間の計測が可能です。</p>\n<h2>コンパイルが遅くなる代表的な要因と改善案</h2>\n<p>コンパイルが遅くなる代表的な要因と改善案は以下のとおりです。</p>\n<h3>CPU の性能を向上させる</h3>\n<p>まず、コンパイル環境の問題ですが、マシンのスペックが低いとコンパイル時間が長くなります。\n経験上、高速化のカギを握るのは CPU の性能です。\n適切なメモリ割り当て量があれば、メモリの増減は大きな影響を与えません。\n従って、予算に余裕がある場合は、CPU の性能を向上させることが効果的です。</p>\n<h3>ファイルシステムのパフォーマンスを向上させる</h3>\n<p>コンパイル中には多くのファイルが読み書きされます。ファイルシステムのパフォーマンスが低いと、コンパイル時間が長くなります。\n例えば、Windows マシンの WSL2 で Docker を使う場合、Windows ファイルシステムにファイルを配置し、それをバインドマウントしてファイルアクセスを行うと、パフォーマンスが大幅に低下します<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>。</p>\n<h3>ソースコードを減らす</h3>\n<p>単純に言えば、ソースコードが多ければ多いほどコンパイル作業が増えます。\n長期間運用されているプロジェクトはデッドコードが多い傾向があります。これを徹底的に削除することで、コンパイルを高速化できる可能性があります。</p>\n<h3>マクロの使用を減らす</h3>\n<p>マクロはコンパイル時に実行されるタスクです。マクロが多いほどコンパイル時のタスクが増えるため、コンパイル時間が長くなります。\n例えば、マクロはボイラープレートコードの実装を回避するための有用なツールですが、マクロを多用している場合は別の方法に置き換えることで、コンパイル時間の短縮ができる可能性があります。</p>\n<h3>implicit の使用を減らす</h3>\n<p>implicit が多用されると、Scala コンパイラは暗黙の引数や変換を解決するために多くの探索を行う必要があり、コンパイル時間が長くなる可能性があります。implicit は有用な機能ですが、適切な使用法を選択することが重要です。</p>\n<h3>サブプロジェクト間の依存関係を最適化する</h3>\n<p>sbt はデフォルトで並列実行されますが、サブプロジェクト間に依存関係がある場合、依存先がコンパイル完了するまで依存元のコンパイルは開始されません。\n依存関係の設定を最適化することで、プロジェクト全体のコンパイル時間を短縮できる可能性があります。</p>\n<h3>インターフェースと実装を分ける</h3>\n<p>インターフェースと実装を分離することで、依存関係が単純化され、コンパイルが高速化される可能性があります。また、再コンパイルの範囲を限定的にすることもできます。</p>\n<h2>まとめ</h2>\n<p>コンパイルの遅さを改善するためには、いくつかの要因を検討する必要があります。\n具体的には、環境やハードウェアの最適化、ソースコードの整理、マクロや implicit の適切な使用、依存関係の最適化、およびインターフェースと実装の分離が挙げられます。\nこれらの要因を検討し、適切な改善策を適用することで、プロジェクトのコンパイル時間を短縮できるでしょう。</p>\n<h2>脚注</h2>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\"><a href=\"https://learn.microsoft.com/ja-jp/windows/wsl/tutorials/wsl-containers\">参考資料</a><a href=\"#fnref-1\" class=\"footnote-backref\">↩</a></li>\n</ol>\n</div>","frontmatter":{"title":"Scalaプロジェクトのコンパイル時間を短縮するヒント","date":"April 10, 2023","description":"遅いコンパイルに悩んでいるScala開発者必見！本記事では、プロジェクトのコンパイル速度を向上させるための具体的な手法を紹介します。","tags":["Scala"]}},"previous":{"fields":{"slug":"/scala-macro/"},"frontmatter":{"title":"Scala上級者向けのマクロ入門"}},"next":null},"pageContext":{"id":"3fe996dc-98ca-5dad-b0a7-5a908c97ebdd","previousPostId":"4494b12a-c2ac-5a8a-8145-f554a2363b13","nextPostId":null}},"staticQueryHashes":["3000541721","3274528899"],"slicesMap":{}}