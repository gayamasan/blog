{"version":3,"file":"component---src-templates-tags-js-7050f08beb4254f571c0.js","mappings":"wHA4DA,UArDa,IAA4B,IAA3B,YAAEA,EAAW,KAAEC,GAAM,EACjC,MAAM,IAAEC,GAAQF,GACV,MAAEG,EAAK,WAAEC,GAAeH,EAAKI,kBAC7BC,EAAeF,EAAU,SACd,IAAfA,EAAmB,GAAK,KAAG,iBACZF,EAAG,IAEpB,OACE,2BACE,0BAAKI,GACL,0BACGH,EAAMI,KAAI,IAAe,IAAd,KAAEC,GAAM,EAClB,MAAM,KAAEC,GAASD,EAAKE,QAChB,MAAEC,GAAUH,EAAKI,YACvB,OACE,sBAAIC,IAAKJ,GACP,gBAAC,EAAAK,KAAI,CAACC,GAAIN,GAAOE,GACd,KAQX,gBAAC,EAAAG,KAAI,CAACC,GAAG,SAAQ,YACb,C","sources":["webpack:///./src/templates/tags.js"],"sourcesContent":["// https://www.gatsbyjs.com/docs/adding-tags-and-categories-to-blog-posts/\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\n\n// Components\nimport { Link, graphql } from \"gatsby\"\n\nconst Tags = ({ pageContext, data }) => {\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with \"${tag}\"`\n\n  return (\n    <div>\n      <h1>{tagHeader}</h1>\n      <ul>\n        {edges.map(({ node }) => {\n          const { slug } = node.fields\n          const { title } = node.frontmatter\n          return (\n            <li key={slug}>\n              <Link to={slug}>{title}</Link>\n            </li>\n          )\n        })}\n      </ul>\n      {/*\n              This links to a page that does not yet exist.\n              You'll come back to it!\n            */}\n      <Link to=\"/tags\">All tags</Link>\n    </div>\n  )\n}\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query ($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { frontmatter: { date: DESC } }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["pageContext","data","tag","edges","totalCount","allMarkdownRemark","tagHeader","map","node","slug","fields","title","frontmatter","key","Link","to"],"sourceRoot":""}